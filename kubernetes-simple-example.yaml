---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis-config: |
    bind 0.0.0.0
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: redis-config
            items:
              - key: redis-config
                path: redis.conf
      containers:
        - name: redis
          image: redis:7.2.2-alpine
          command:
            - redis-server
            - "/redis-master-volume/redis.conf"
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /redis-master-data
              name: data
            - mountPath: /redis-master
              name: config
          env: # welp
            - name: MASTER
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
spec:
  ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: redis
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  labels:
    app.kubernetes.io/name: app1
    app.kubernetes.io/instance: dev
    app.kubernetes.io/version: "0.0.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app1
      app.kubernetes.io/instance: dev
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app1
        app.kubernetes.io/instance: dev
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 60
      containers:
        - name: app1
          image: "rafaelmanzanom/lab4_app1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: app1-service
  labels:
    app: app1
spec:
  ports:
    - port: 80
      targetPort: 5000
  selector:
    app: app1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app2
  labels:
    app.kubernetes.io/name: app2
    app.kubernetes.io/instance: dev
    app.kubernetes.io/version: "0.0.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app2
      app.kubernetes.io/instance: dev
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app2
        app.kubernetes.io/instance: dev
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 60
      containers:
        - name: app2
          image: "rafaelmanzanom/lab4_app2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: app2-service
  labels:
    app: app2
spec:
  ports:
    - port: 80
      targetPort: 5000
  selector:
    app: app2
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: k8s.qualentum.net # hehe not taken yet
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: app2-service
                port:
                  number: 80